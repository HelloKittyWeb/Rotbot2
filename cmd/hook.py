# -*- coding: utf-8 -*-
import datetime

from aiogram import types
import time
import logging

import config
from utils import keyboard
from utils import database

log = logging.getLogger('main')

materials = {
    'soloma': 'üï∏–°–æ–ª–æ–º–∞:',
    'wood': 'üå¥–î–µ—Ä–µ–≤–æ:',
    'stone': 'ü™®–ö–∞–º–µ–Ω—å:',
    'metall': 'ü¶æ–ú–µ—Ç–∞–ª–ª:',
    'mvk': '‚öô–ú–í–ö:',
    'garage': 'üö™üèó–ì–∞—Ä–∞–∂–Ω–∞—è –¥–≤–µ—Ä—å:',
    'metal_door': 'üö™ü¶æ–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –¥–≤–µ—Ä—å:',
    'wood_door': 'üö™üå¥–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –¥–≤–µ—Ä—å:',
    'mvk_door': 'üö™‚öô–ú–í–ö –¥–≤–µ—Ä—å:',
}

def generate_time(sec):
    text = ''
    _time = time.gmtime(sec)
    if _time.tm_hour > 0:
        text = f'{_time.tm_hour} —á. {_time.tm_min} –º.'
    else:
        text = f'{_time.tm_min} –º.'
    return text

async def create_notification(msg: types.CallbackQuery):
    tg_id = msg.data.split(':')[0]
    material = msg.data.split(':')[1]
    timestamp = msg.data.split(':')[2]
    note_id = msg.data.split(':')[3]

    if datetime.datetime.fromtimestamp(float(timestamp)) < datetime.datetime.now():
        await msg.message.delete_reply_markup()
        await msg.answer('–í—Ä–µ–º—è –¥–ª—è –≥–Ω–∏–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ!')
        return

    if msg.from_user.id != int(tg_id):
        await msg.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è —Ç–µ–±—è!")
        return

    try:
        await msg.bot.get_chat(tg_id)
    except:
        await msg.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º–µ–Ω—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ—Å–ª–µ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        return

    if note_id != '-1':
        gnote = database.get_note(note_id)
    else:
        gnote = ''

    note = f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞ {materials[material]}\n\n{gnote}\n\n–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –¥–æ –≥–Ω–∏–µ–Ω–∏—è!'
    database.add_notification(int(tg_id), note, timestamp)
    await msg.bot.send_message(tg_id, '–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')

async def bot_calc(msg: types.Message):
    try:
        bot_username = await msg.bot.get_me()
        if msg.chat.type != 'private':
            if bot_username['username'].lower() not in msg.text.lower():
                return
            health = msg.text.split(' ')[1]
            if not health:
                await msg.answer(f"–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ HP –ø–æ—Å—Ç—Ä–æ–π–∫–∏\n @{bot_username} 200 –∑–∞–º–µ—Ç–∫–∞")
                return
            if len(msg.text.split(' ')) > 3:
                notification_note = ' '.join(msg.text.split(' ')[2:])
            else:
                notification_note = None
        else:
            if len(msg.text.split(' ')) > 1:
                notification_note = ' '.join(msg.text.split(' ')[1:])
                health = msg.text.split(' ')[0]
            else:
                notification_note = None
                health = msg.text

            if not health:
                await msg.answer(f"–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ HP –ø–æ—Å—Ç—Ä–æ–π–∫–∏\n 200 –∑–∞–º–µ—Ç–∫–∞")
                return

        if int(health) < 0:
            raise Exception("Bad number")
    except:
        log.exception('')
        if msg.chat.type == 'private':
            await msg.answer("ü•µ–ü–æ—Ö–æ–∂–µ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –Ω–µ —Ü–∏—Ñ—Ä—É –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HP —Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–π, –∞ —è –ø–æ—Å—á–∏—Ç–∞—é –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≥–Ω–∏–µ–Ω–∏—è‚úç")
        return

    bulding = {
        'soloma': {'max': 10, 'name': 'üï∏–°–æ–ª–æ–º–∞:', 'time': round(int(health) * 60 / 10)},
        'wood': {'max': 250, 'name': 'üå¥–î–µ—Ä–µ–≤–æ:', 'time': round(int(health) * 180 / 250)},
        'stone': {'max': 500, 'name': 'ü™®–ö–∞–º–µ–Ω—å:', 'time': round(int(health) * 300 / 500)},
        'metall': {'max': 1000, 'name': 'ü¶æ–ú–µ—Ç–∞–ª–ª:', 'time': round(int(health) * 480 / 1000)},
        'mvk': {'max': 2000, 'name': '‚öô–ú–í–ö:', 'time': round(int(health) * 720 / 2000)},
        'garage': {'max': 600, 'name': 'üö™üèó–ì–∞—Ä–∞–∂–Ω–∞—è –¥–≤–µ—Ä—å:', 'time': round(int(health) * 480 / 600)},
        'metal_door': {'max': 250, 'name': 'üö™ü¶æ–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –¥–≤–µ—Ä—å:', 'time': round(int(health) * 480 / 250)},
        'wood_door': {'max': 200, 'name': 'üö™üå¥–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –¥–≤–µ—Ä—å:', 'time': round(int(health) * 180 / 200)},
        'mvk_door': {'max': 1000, 'name': 'üö™‚öô–ú–í–ö –¥–≤–µ—Ä—å:', 'time': round(int(health) * 720 / 1000)},
    }

    _text = ''
    kb_values = {}
    for k, v in bulding.items():
        if not int(health) > v['max']:
            _t = generate_time(v['time'] * 60)
            _text += v['name'] + ' ' + _t + '\n'
            kb_values[k] = {'time': v['time'] * 60, 'name': v['name'], 'note': notification_note}
    if kb_values:
        kb = keyboard.get_notification_kb(kb_values, msg.from_user.id)
    else:
        kb = None

    _text += f'\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ'
    if not notification_note:
        if msg.chat.type != 'private':
            _ct = f'@{bot_username["username"]}'
        else:
            _ct = ''
        _text += f'\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É:\n{_ct} {health} <–∑–∞–º–µ—Ç–∫–∞>'

    await msg.answer(_text, reply_markup=kb)
